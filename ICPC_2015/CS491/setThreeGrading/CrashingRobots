public class Main {
	
	public static int xBoundary;
	public static int yBoundary;
	
	public static void main (String[]args)
	{
		java.util.Scanner stdin = new java.util.Scanner (System.in);
		
		int scenarios = stdin.nextInt();
		while (scenarios > 0)
		{
			Robot.robotList.clear();
			xBoundary = stdin.nextInt();
			yBoundary = stdin.nextInt();
			
			int robots = stdin.nextInt();
			int instructions = stdin.nextInt();
			
			for (int i = 0; i < robots; i++)
			{
				int x = stdin.nextInt();
				int y = stdin.nextInt();
				Robot.Direction dir = Robot.Direction.getDirection(stdin.next());
				
				Robot rob = new Robot (x,y,dir);
			}
			
			boolean crash = false;
			int currentInstruction;
			for (currentInstruction = 0; currentInstruction < instructions; currentInstruction++)
			{
				int index = stdin.nextInt() - 1;
				String code = stdin.next();
				int repeat = stdin.nextInt();
				
				Robot inFocus = Robot.robotList.get(index);
				String result = inFocus.act(code, repeat);
				if (result.contains("RC"))
				{
					System.out.println("Robot " + (index+1) + " crashes into robot " + result.substring(2));
					crash = true;
					currentInstruction++;
					break;
				}
				else if (result.contains("WC"))
				{
					System.out.println("Robot " + (index+1) + " crashes into the wall");
					crash = true;
					currentInstruction++;
					break;
				}	
			}
			
			for (int j = currentInstruction; j < instructions; j++)
			{
				stdin.nextInt();
				stdin.next();
				stdin.nextInt();
			}
			
			if (!crash)
			{
				System.out.println("OK");
			}
			
			scenarios--;
		}
	}

}

class Robot
{
	int x, y;
	Direction dir;
	static java.util.ArrayList<Robot> robotList = new java.util.ArrayList<Robot> ();
	
	public Robot(int a, int b, Direction dir)
	{
		x = a;
		y = b;
		this.dir = dir;	
		robotList.add(this);
	}
	
	enum Direction
	{
		
		NORTH(0),
		EAST(1),
		SOUTH(2),
		WEST(3);
		
		int value;
		Direction(int val)
		{
			value = val;
		}
		
		static final Direction[] directions = new Direction [] {NORTH, EAST, SOUTH, WEST};
		
		static Direction getRotatedDirection(Direction dir, String code)
		{
			if (code.equals("Right"))
			{
				int value = dir.value;
				return directions[(value+1)%4];
			}
			else
			{
				int value = dir.value;
				return directions[(value+3)%4];
			}
		}
		
		static Direction getDirection(String dir)
		{
				if (dir.equals("N"))
				{
					return NORTH;
				}
				if (dir.equals("E"))
				{
					return EAST;
				}
				if (dir.equals("S"))
				{
					return SOUTH;
				}
				else
				{
					return WEST;
				}
			}
		}
	
	
	// also watches for collisions
	public String act(String code, int repeat)
	{
		// for turning right
		if (code.equals("R"))
		{
			for (int i = 0; i < repeat; i++)
				dir = Direction.getRotatedDirection(dir, "Right");
			return "OK";
		}
		
		else if (code.equals("L"))
		{
			for (int i =0 ; i < repeat; i++)
				dir = Direction.getRotatedDirection(dir, "Left");
			return "OK";
		}
		
		else
		{
			// guaranteed to of length 2;
			int[] closestRobotInfo = this.getDistanceOfClosestRobot();
			int closestWallDistance = this.getDistanceOfClosestWall();

			if (closestRobotInfo[0] != Main.xBoundary + Main.yBoundary && repeat >= closestRobotInfo[0])
			{
				return "RC" + closestRobotInfo[1];
			}
			else if (repeat >= closestWallDistance)
			{
				return "WC";
			}
			
			else
			{	
				if (dir.equals(Direction.NORTH))
					y += repeat;
				else if (dir.equals(Direction.SOUTH))
					y -= repeat;
				else if (dir.equals(Direction.EAST))
					x += repeat;
				else if (dir.equals(Direction.WEST))
					x-= repeat;
				
				return "OK";
			}
		}
	}
	
	public int[] getDistanceOfClosestRobot()
	{			
		int minDistance = Main.xBoundary + Main.yBoundary;
		int minIndex = robotList.size();
		
		switch (dir)
		{
			case NORTH:
			{
				for (int i = 0; i < robotList.size(); i++)
				{
					Robot rob = robotList.get(i);
					if (!rob.equals(this) && rob.x == this.x && rob.y - this.y < minDistance)
					{
						minDistance = rob.y - this.y;
						minIndex = i;
					}
				}
				break;
			}
			
			case SOUTH:
			{
				for (int i =0; i < robotList.size(); i++)
				{
					Robot rob = robotList.get(i);
					if (!rob.equals(this) && rob.x == this.x && this.y - rob.y < minDistance)
					{	
						minDistance = this.y - rob.y;
						minIndex = i;
					}
				}
				break;
			}
			
			case EAST:
			{
				for (int i = 0; i < robotList.size(); i++)
				{
					Robot rob = robotList.get(i);
					if (!rob.equals(this) && rob.y == this.y && rob.x - this.x < minDistance)
					{
						minDistance = rob.x - this.x;
						minIndex = i;
					}
				}
				break;
			}
			
			case WEST:
			{
				for (int i = 0; i < robotList.size(); i++)
				{
					Robot rob = robotList.get(i);
					if (!rob.equals(this) && rob.y == this.y && this.x - rob.x < minDistance)
					{
						minDistance = this.x - rob.x;
						minIndex = i;
					}
				}
				break;
			}
		}
		
		return new int[] {minDistance, minIndex + 1};
	}
	
	public int getDistanceOfClosestWall()
	{
		switch (dir)
		{
			case NORTH:
			{
				return Main.yBoundary - this.y + 1;	
			}
			
			case SOUTH:
			{
				return this.y;
			}
			
			case EAST:
			{
				return Main.xBoundary - this.x + 1;
			}

			default:
			{
				return this.x;
			}
		}
	}

}

